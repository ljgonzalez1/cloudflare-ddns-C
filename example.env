# ==============================================================================
# Cloudflare DDNS Client - Environment Configuration
# ==============================================================================
# Version: 2.0
#
# This file contains example environment variable configurations for the
# Cloudflare Dynamic DNS client. Copy this file to `.env` and customize
# the values according to your setup.
#
# SECURITY WARNING: Never commit your actual API keys to version control!
# ==============================================================================

# ==============================================================================
# REQUIRED CONFIGURATION
# ==============================================================================

# Cloudflare API Token
#
# This is your Cloudflare API token with Zone:Edit permissions.
#
# How to get your API token:
# 1. Go to https://dash.cloudflare.com/profile/api-tokens
# 2. Click "Create Token"
# 3. Use "Edit zone DNS" template
# 4. Select your zones
# 5. Copy the generated token
#
# Required permissions:
# - Zone:Zone:Read
# - Zone:DNS:Edit
#
# Example: 1234567890abcdef1234567890abcdef12345678
CLOUDFLARE_API_KEY=your_cloudflare_api_token_here

# Domains to Manage
#
# Comma-separated list of fully qualified domain names that should be
# managed by this DDNS client. Each domain will have its A record
# updated to point to your current public IP address.
#
# Supported formats:
# - Root domains: example.com
# - Subdomains: subdomain.example.com
# - Multiple domains: domain1.com,domain2.org,sub.domain3.net
#
# Examples:
# DOMAINS=example.com
# DOMAINS=home.example.com,server.example.com
# DOMAINS=example.com,myserver.example.org,backup.mydomain.net
DOMAINS=example.com,subdomain.example.com

# ==============================================================================
# OPTIONAL CONFIGURATION
# ==============================================================================

# Cloudflare Proxy Setting
#
# Controls whether DNS records should be proxied through Cloudflare's
# edge network (orange cloud). When enabled, traffic to your domains
# will be routed through Cloudflare's CDN and security features.
#
# Valid values:
# - true, True, TRUE, 1, yes, YES - Enable proxy
# - false, False, FALSE, 0, no, NO - Disable proxy (direct DNS)
# - Empty or unset - Defaults to false
#
# Benefits of enabling proxy:
# - DDoS protection
# - CDN acceleration
# - SSL/TLS termination
# - Firewall rules
#
# Considerations:
# - May hide your real IP address
# - Some applications may not work correctly
# - Additional Cloudflare features may apply
#
# Default: false
PROXIED=false

# ==============================================================================
# ADVANCED CONFIGURATION (Usually not needed)
# ==============================================================================

# Application Debug Mode
#
# Enables detailed debug logging for troubleshooting issues.
# Only used if the application was compiled with debug support.
#
# Valid values: true, false
# Default: false (only enable for troubleshooting)
#DEBUG=false

# IP Detection Timeout
#
# Timeout in seconds for IP address detection from external services.
# Increase if you have slow internet connection.
#
# Valid values: 1-300 (seconds)
# Default: 30
#IP_TIMEOUT=30

# API Request Timeout
#
# Timeout in seconds for Cloudflare API requests.
# Increase if you experience timeout errors.
#
# Valid values: 1-300 (seconds)
# Default: 60
#API_TIMEOUT=60

# ==============================================================================
# DEPLOYMENT-SPECIFIC CONFIGURATION
# ==============================================================================

# Application Log Level
#
# Controls the verbosity of application output.
# Only used if the application supports runtime log level configuration.
#
# Valid values:
# - ERROR: Only error messages
# - WARN: Warnings and errors
# - INFO: General information, warnings, and errors
# - DEBUG: All messages including debug information
#
# Default: INFO
#LOG_LEVEL=INFO

# Update Interval (for daemon mode - future feature)
#
# How often to check for IP address changes, in minutes.
# Only relevant if running as a service or daemon.
#
# Valid values: 1-1440 (minutes)
# Default: 5
#UPDATE_INTERVAL=5

# Notification Settings (future feature)
#
# Configuration for notifications when DNS records are updated.
#
# Webhook URL for notifications
#WEBHOOK_URL=https://your-webhook-endpoint.com/notify

# Email notification settings
#NOTIFY_EMAIL=admin@example.com
#SMTP_SERVER=smtp.gmail.com
#SMTP_PORT=587
#SMTP_USERNAME=your-email@gmail.com
#SMTP_PASSWORD=your-app-password

# ==============================================================================
# EXAMPLE CONFIGURATIONS
# ==============================================================================

# Example 1: Home Server Setup
# Simple home server with single domain, proxy disabled for direct access
#CLOUDFLARE_API_KEY=abc123...
#DOMAINS=home.mydomain.com
#PROXIED=false

# Example 2: Multiple Services
# Multiple subdomains for different services
#CLOUDFLARE_API_KEY=def456...
#DOMAINS=web.example.com,api.example.com,mail.example.com
#PROXIED=true

# Example 3: Development Environment
# Development setup with debug logging
#CLOUDFLARE_API_KEY=ghi789...
#DOMAINS=dev.myproject.com,staging.myproject.com
#PROXIED=false
#DEBUG=true
#LOG_LEVEL=DEBUG

# Example 4: Production Deployment
# Production setup with multiple domains and monitoring
#CLOUDFLARE_API_KEY=jkl012...
#DOMAINS=example.com,www.example.com,api.example.com
#PROXIED=true
#UPDATE_INTERVAL=10
#WEBHOOK_URL=https://monitoring.example.com/webhook
#NOTIFY_EMAIL=ops@example.com

# ==============================================================================
# DOCKER ENVIRONMENT
# ==============================================================================

# When running in Docker, you can pass environment variables using:
#
# docker run -e CLOUDFLARE_API_KEY=your_token \
#            -e DOMAINS=example.com \
#            -e PROXIED=false \
#            cloudflare-ddns:latest
#
# Or using docker-compose.yml:
#
# version: '3.8'
# services:
#   cloudflare-ddns:
#     image: cloudflare-ddns:latest
#     environment:
#       - CLOUDFLARE_API_KEY=your_token
#       - DOMAINS=example.com
#       - PROXIED=false
#     restart: unless-stopped

# ==============================================================================
# KUBERNETES DEPLOYMENT
# ==============================================================================

# When deploying to Kubernetes, create a Secret:
#
# apiVersion: v1
# kind: Secret
# metadata:
#   name: cloudflare-ddns-config
# type: Opaque
# stringData:
#   CLOUDFLARE_API_KEY: your_token_here
#   DOMAINS: example.com,subdomain.example.com
#   PROXIED: "false"

# ==============================================================================
# SYSTEMD SERVICE
# ==============================================================================

# When creating a systemd service, add environment variables:
#
# [Unit]
# Description=Cloudflare DDNS Client
# After=network.target
#
# [Service]
# Type=oneshot
# Environment=CLOUDFLARE_API_KEY=your_token
# Environment=DOMAINS=example.com
# Environment=PROXIED=false
# ExecStart=/usr/local/bin/cloudflare_ddns
# User=ddns
#
# [Install]
# WantedBy=multi-user.target

# ==============================================================================
# SECURITY BEST PRACTICES
# ==============================================================================

# 1. API Token Security:
#    - Use API tokens instead of Global API keys
#    - Create tokens with minimal required permissions
#    - Regularly rotate API tokens
#    - Never share tokens in logs or code repositories

# 2. Environment Variables:
#    - Keep this file secure (chmod 600 .env)
#    - Never commit .env files to version control
#    - Use proper secrets management in production
#    - Consider using environment-specific configurations

# 3. Network Security:
#    - Run the application with minimal privileges
#    - Use firewall rules to restrict network access
#    - Consider running in a containerized environment
#    - Monitor application logs for suspicious activity

# 4. Monitoring:
#    - Set up monitoring for DNS changes
#    - Monitor API rate limits
#    - Set up alerts for application failures
#    - Regularly review access logs

# ==============================================================================
# TROUBLESHOOTING
# ==============================================================================

# Common Issues and Solutions:

# Issue: "API authentication failed"
# Solution: Verify your API token and permissions
# Test: curl -H "Authorization: Bearer YOUR_TOKEN" \
#       https://api.cloudflare.com/client/v4/user/tokens/verify

# Issue: "DNS zone not found"
# Solution: Ensure the domain is added to your Cloudflare account
# Check: Domain is active in Cloudflare dashboard

# Issue: "Network connection failed"
# Solution: Check internet connectivity and firewall settings
# Test: curl -I https://api.cloudflare.com/

# Issue: "Environment variable not found"
# Solution: Ensure all required variables are set
# Check: echo $CLOUDFLARE_API_KEY

# For more troubleshooting help, see README.md or visit:
# https://github.com/user/cloudflare-ddns-C/wiki/Troubleshooting
